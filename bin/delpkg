#!/usr/bin/python3
""" Delete packages from a repository.

Functions:
==========
* del_pkgfiles(cachedir, pkgs)
* repo_remove(db, pkgs, opts=None)
"""

import argparse
import logging
import shutil
import sys

import packaging_scripts.pacmanconf as pacmanconf
import packaging_scripts.pkgfiles as pkgfiles
import packaging_scripts.pkgfiles as repos

# ========== Constants ==========
REPO_REMOVE_CMD = '/usr/bin/repo-remove'
DB_EXT = 'db.tar.xz'

# ========== Exit codes ==========
E_REPO_REMOVEERR = 2

# ========== Logging setup ==========
console_formatter = logging.Formatter('==> %(levelname)s %(message)s')
syslog = logging.getLogger(__name__)
syslog.setLevel(logging.DEBUG)

stdout_handler = logging.StreamHandler(sys.stdout)
stdout_handler.setLevel(logging.INFO)
stdout_handler.setFormatter(console_formatter)

stderr_handler = logging.StreamHandler()
stderr_handler.setLevel(logging.ERROR)
stderr_handler.setFormatter(console_formatter)

syslog.addHandler(stdout_handler)
syslog.addHandler(stderr_handler)


# ========== Functions ==========
def del_pkgfile(pkg):
    """Remove package file.

    :param pkg: path of package to remove
    :type pkg: str, bytes, or path-like object
    """
    shutil.remove(pkg)
    syslog.info(f"Removed {pkg}")


if __name__ == '__main__':
    parser = argparse.ArgumentParser()
    parser.add_argument('-s', '--sign',
                        dest='opts',
                        action='append_const',
                        const='--sign',
                        help='sign repository file')
    parser.add_argument('-v', '--verbose',
                        action='store_true',
                        help='increase script verbosity')
    parser.add_argument('repository',
                        choices=pacmanconf.list_configured_repos(),
                        help='the repository to operate on',
                        metavar='repo')
    parser.add_argument('packages',
                        default=None,
                        nargs='+',
                        help='packages to remove')

    args = parser.parse_args()
    repo = args.repository
    pkgs = args.packages
    opts = args.opts

    cachedir = f"/var/cache/pacman/{repo}"
    # this assumes that the db file for the repo
    # has the same name as that repo
    db = f"{cachedir}/{repo}.{DB_EXT}"

    if args.verbose:
        stdout_handler.setLevel(logging.DEBUG)

    pkglist = pkgfiles.get_pkgfiles(directory=cachedir) +\
        pkgfiles.get_pkgfiles(directory=cachedir, signatures_only=True)

    map(lambda pkg: del_pkgfile(pkg), pkglist)

    try:
        repos.repo_add('remove', db, *pkglist, opts=opts)
    except repos.RepoAddError as e:
        syslog.error(e)
        exit(E_REPO_REMOVEERR)
